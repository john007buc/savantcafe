<?php

namespace John\ArticleBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{

    public function countArticles($active,$published,$category,$user_id=null)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('count(a)');

        if(!is_null($user_id)){

            $qb->where('a.author=:user_id')
                ->setParameter('user_id',$user_id);
        }

        if($category!="all"){
            $qb->join('a.categories','c')
                ->andWhere('c.slug=:category')
                ->setParameter('category',$category);
        }



        if(!is_null($active))
        {
                $qb->andWhere('a.active=:active')
                ->setParameter('active',$active);
        }

        if(!is_null($published)){
            $qb->andWhere('a.published=:published')
                ->setParameter('published',$published);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getArticles($active,$published,$category,$offset=null,$max=null,$user_id=null)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a');


        if($category!="all"){
            $qb->join('a.categories','c')
                ->where('c.slug=:category')
                ->setParameter('category',$category);
        }




        if(!is_null($active)){
            $qb->andWhere('a.active=:active')
                ->setParameter('active',$active);
        }

        if(!is_null($published)){

                 $qb->andWhere('a.published=:published')
                  ->setParameter('published',$published);
        }

        if(!is_null($user_id)){
            $qb->andWhere('a.author=:user_id')
                ->setParameter('user_id',$user_id);
        }

          $qb->orderBy("a.updated",'desc');


        if($offset){
            $qb->setFirstResult($offset);
        }

        if($max){
            $qb->setMaxResults($max);
        }

        return $qb->getQuery()->getResult();
    }
}
